-- Funk language grammar.

comment "//" ;
comment "/*" "*/" ;

Program.	Prog ::= [Decl] "main" Exp ;

Declaration.	Decl ::= Sign [Sign] "be" Exp ;

Sign.		Sign ::= Type ":" Ident;

ELet.		Exp ::= "let" Decl "in" Exp ;
ECase.		Exp ::= "case" Exp "of" [Patt] ;
EIf.		Exp ::= "if" Exp "then" Exp "else" Exp "fi";
ELambda.	Exp ::= Type ":lambda" [Sign] "->" Exp ;
EGet.		Exp1 ::= Ident ;
EApplication.	Exp1 ::= "(" Ident [Exp1] ")" ;
EList.		Exp1 ::= "[" [Exp2] "]" ;
EEmptyList.	Exp1 ::= Type ":[]" ;
EHeadTail.	Exp1 ::= Exp "::" Exp;
EEmptyTuple.	Exp1 ::= "{}" ;
ETuple.		Exp1 ::= "{" [Exp2] "}" ; 
EInt.		Exp1 ::= Integer ;
EFalse.		Exp1 ::= "False" ;
ETrue.		Exp1 ::= "True" ;
EPom.		Exp2 ::= Exp1 ;

coercions Exp 1 ;

Pattern.	Patt ::= Match "->" Exp;

MatchExp.	Match ::= Exp ;
MatchHeadTail.	Match ::= Ident "::" Ident ;
MatchTuple.	Match ::= "{" [Ident] "}" ;

TFun.		Type ::= Type1 "=>" Type;
TTuple.		Type1 ::= "{" [Type] "}" ;
TList.		Type1 ::= "[" Type "]" ;
TInt. 		Type1 ::= "int";
TBool.		Type1 ::= "bool";
coercions Type 1;

separator Ident "," ;
separator Decl ";" ;
separator Exp "" ;
separator Exp1 "" ;
separator nonempty Exp2 "," ;
separator Patt "|" ;
separator Sign "";
separator Type ".";
